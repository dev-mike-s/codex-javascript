// ============================================
// 2.1 BEDINGTE ANWEISUNGEN
// ============================================

// ============================================
// IF-ANWEISUNG (einfach)
// ============================================

let alter = 20;

if (alter >= 18) {
  console.log("Du bist vollj√§hrig"); // ‚úÖ Wird ausgef√ºhrt
}

// Mehrere Statements im Block
if (alter >= 18) {
  console.log("Zugriff gew√§hrt");
  console.log("Willkommen!");
}

// ============================================
// IF-ELSE (Entweder-Oder)
// ============================================

let temperatur = 15;

if (temperatur > 25) {
  console.log("Es ist warm");
} else {
  console.log("Es ist k√ºhl"); // ‚úÖ Wird ausgef√ºhrt
}

// Praktisches Beispiel: Gerade/Ungerade
let zahl = 7;

if (zahl % 2 === 0) {
  console.log(zahl, "ist gerade");
} else {
  console.log(zahl, "ist ungerade"); // ‚úÖ
}

// ============================================
// IF-ELSE IF-ELSE (Mehrere Bedingungen)
// ============================================

let punkte = 75;

if (punkte >= 90) {
  console.log("Note: A");
} else if (punkte >= 80) {
  console.log("Note: B");
} else if (punkte >= 70) {
  console.log("Note: C"); // ‚úÖ Wird ausgef√ºhrt
} else if (punkte >= 60) {
  console.log("Note: D");
} else {
  console.log("Note: F");
}

// Wichtig: Nur der ERSTE zutreffende Block wird ausgef√ºhrt!
let score = 95;

if (score >= 50) {
  console.log("Bestanden"); // ‚úÖ Stoppt hier, obwohl auch >= 90 zutrifft
} else if (score >= 90) {
  console.log("Sehr gut"); // Wird NICHT erreicht
}

// ‚úÖ BESSER: Vom Spezifischen zum Allgemeinen
if (score >= 90) {
  console.log("Sehr gut"); // ‚úÖ Wird ausgef√ºhrt
} else if (score >= 50) {
  console.log("Bestanden");
}

// ============================================
// VERSCHACHTELTE IF-STATEMENTS
// ============================================

console.log("\n--- Verschachtelte IFs ---");

let istAngemeldet = true;
let hatRechte = true;
let istAdmin = false;

if (istAngemeldet) {
  console.log("Benutzer ist angemeldet");

  if (hatRechte) {
    console.log("Zugriff gew√§hrt"); // ‚úÖ

    if (istAdmin) {
      console.log("Admin-Panel verf√ºgbar");
    } else {
      console.log("Standard-Benutzer"); // ‚úÖ
    }
  } else {
    console.log("Keine Rechte");
  }
} else {
  console.log("Bitte anmelden");
}

// ‚úÖ BESSER: Kombiniere mit logischen Operatoren (lesbarer!)
if (istAngemeldet && hatRechte) {
  console.log("Zugriff gew√§hrt (kombiniert)"); // ‚úÖ
}

if (istAngemeldet && hatRechte && istAdmin) {
  console.log("Admin-Zugriff");
}

// EARLY RETURN Pattern (h√§ufig in Funktionen)
function pr√ºfeZugriff(angemeldet, rechte) {
  if (!angemeldet) {
    console.log("Nicht angemeldet");
    return; // Fr√ºher Ausstieg
  }

  if (!rechte) {
    console.log("Keine Rechte");
    return; // Fr√ºher Ausstieg
  }

  // Hauptlogik nur wenn alles OK
  console.log("Zugriff gew√§hrt");
}

pr√ºfeZugriff(true, false);

// ============================================
// IF OHNE GESCHWEIFTE KLAMMERN
// ============================================

let x = 10;

// Funktioniert f√ºr EINE Zeile
if (x > 5) console.log("Gr√∂√üer als 5"); // ‚úÖ

// ‚ö†Ô∏è ABER VORSICHT: Kann zu Bugs f√ºhren!
if (x > 5) console.log("Zeile 1");
console.log("Zeile 2"); // ‚ùå Wird IMMER ausgef√ºhrt (nicht Teil des if!)

// ‚úÖ BESTE PRAXIS: IMMER geschweifte Klammern verwenden!
if (x > 5) {
  console.log("Zeile 1");
  console.log("Zeile 2"); // ‚úÖ Beide nur wenn Bedingung wahr
}

// ============================================
// TRUTHY & FALSY in IF-Bedingungen
// ============================================

console.log("\n--- Truthy/Falsy in Bedingungen ---");

// FALSY-WERTE: false, 0, "", null, undefined, NaN
let username = "Max";
if (username) {
  // String mit Inhalt = truthy
  console.log("Benutzername vorhanden:", username); // ‚úÖ
}

let emptyString = "";
if (emptyString) {
  // Leerer String = falsy
  console.log("Wird nicht ausgef√ºhrt");
} else {
  console.log("String ist leer"); // ‚úÖ
}

// Pr√ºfe auf undefined/null
let user;
if (user) {
  console.log("User existiert");
} else {
  console.log("User ist undefined"); // ‚úÖ
}

// Pr√ºfe auf 0
let count = 0;
if (count) {
  console.log("Count ist truthy");
} else {
  console.log("Count ist 0 (falsy)"); // ‚úÖ
}

// ‚ö†Ô∏è PROBLEM: 0 ist eine g√ºltige Zahl, wird aber als falsy behandelt!
// ‚úÖ L√ñSUNG: Explizit vergleichen
if (count !== undefined && count !== null) {
  console.log("Count existiert:", count); // ‚úÖ Auch bei 0!
}

// Oder mit Nullish Coalescing
let displayCount = count ?? "Keine Daten";
console.log("Display:", displayCount); // 0 (nicht "Keine Daten")

// ============================================
// VERGLEICHSOPERATOREN IN BEDINGUNGEN
// ============================================

console.log("\n--- Vergleiche in if ---");

let a = 5;
let b = "5";

// Lose Gleichheit (==) - NICHT EMPFOHLEN!
if (a == b) {
  console.log("5 == '5' ist true (Typ-Konvertierung)"); // ‚úÖ
}

// ‚úÖ STRIKTE GLEICHHEIT (===) - IMMER VERWENDEN!
if (a === b) {
  console.log("Wird nicht ausgef√ºhrt");
} else {
  console.log("5 !== '5' (verschiedene Typen)"); // ‚úÖ
}

// Gr√∂√üer/Kleiner Vergleiche
let alter2 = 25;

if (alter2 >= 18 && alter2 < 65) {
  console.log("Arbeitsf√§higes Alter"); // ‚úÖ
}

// ============================================
// LOGISCHE OPERATOREN IN BEDINGUNGEN
// ============================================

console.log("\n--- Logische Operatoren ---");

let istWochenende = true;
let hatUrlaub = false;

// UND (&&) - Beide m√ºssen true sein
if (istWochenende && hatUrlaub) {
  console.log("Frei und entspannt");
} else {
  console.log("Mindestens eine Bedingung ist false"); // ‚úÖ
}

// ODER (||) - Mindestens eine muss true sein
if (istWochenende || hatUrlaub) {
  console.log("Freizeit!"); // ‚úÖ
}

// NICHT (!) - Negation
if (!hatUrlaub) {
  console.log("Kein Urlaub"); // ‚úÖ
}

// Komplexe Bedingungen
let stunde = 14;
let istWerktag = true;

if (stunde >= 9 && stunde < 17 && istWerktag) {
  console.log("B√ºrozeiten"); // ‚úÖ
}

// üí° WICHTIG F√úR REACT:
// Conditional Rendering mit logischen Operatoren
// {isLoggedIn && <UserProfile />}
// {error || <DefaultMessage />}

// ============================================
// TERN√ÑRER OPERATOR (? :)
// ============================================

console.log("\n--- Tern√§rer Operator ---");

// SYNTAX: condition ? wertWennTrue : wertWennFalse

let alter3 = 20;
let status = alter3 >= 18 ? "Erwachsen" : "Minderj√§hrig";
console.log("Status:", status); // "Erwachsen"

// VERGLEICH MIT IF-ELSE
let status2;
if (alter3 >= 18) {
  status2 = "Erwachsen";
} else {
  status2 = "Minderj√§hrig";
}
console.log("Status 2:", status2); // "Erwachsen"

// Inline in console.log
console.log("Du bist", alter3 >= 18 ? "vollj√§hrig" : "minderj√§hrig");

// In String-Templates
let name = "Max";
console.log(`Hallo ${name.length > 5 ? "langer" : "kurzer"} Name!`);

// VERSCHACHTELTE TERN√ÑRE OPERATOREN
let punkte2 = 75;
let note =
  punkte2 >= 90 ? "A" : punkte2 >= 80 ? "B" : punkte2 >= 70 ? "C" : punkte2 >= 60 ? "D" : "F";
console.log("Note:", note); // "C"

// ‚ö†Ô∏è Zu viele Verschachtelungen = unleserlich!
// ‚úÖ Bei komplexer Logik: if-else verwenden!

// PRAKTISCHE ANWENDUNGEN
let userInput = "";
let finalValue = userInput ? userInput : "Standard";
console.log("Final Value:", finalValue); // "Standard"

// Oder k√ºrzer mit ||
let finalValue2 = userInput || "Standard";
console.log("Final Value 2:", finalValue2); // "Standard"

// üí° WICHTIG F√úR REACT:
// Tern√§rer Operator ist SEHR h√§ufig in JSX!
// {isLoading ? <Spinner /> : <Content />}
// {error ? <ErrorMessage /> : null}
// className={isActive ? 'active' : 'inactive'}

// ============================================
// SWITCH-CASE ANWEISUNGEN
// ============================================

console.log("\n--- Switch-Case ---");

let wochentag = "Montag";

switch (wochentag) {
  case "Montag":
    console.log("Start der Woche"); // ‚úÖ
    break; // Wichtig! Sonst l√§uft es weiter
  case "Freitag":
    console.log("Fast Wochenende");
    break;
  case "Samstag":
  case "Sonntag": // Mehrere Cases f√ºr gleichen Code
    console.log("Wochenende!");
    break;
  default: // Optional: wenn nichts passt
    console.log("Ein normaler Tag");
}

// ‚ö†Ô∏è OHNE BREAK - Fall-Through!
console.log("\n--- Fall-Through Beispiel ---");

let note2 = "B";

switch (note2) {
  case "A":
    console.log("Ausgezeichnet");
  // Kein break! F√§llt durch
  case "B":
    console.log("Gut"); // ‚úÖ
  // Kein break! F√§llt durch
  case "C":
    console.log("Bestanden"); // ‚úÖ Wird auch ausgef√ºhrt!
    break;
  case "D":
  case "F":
    console.log("Nicht bestanden");
    break;
}

// SWITCH mit Zahlen
let monat = 3;

switch (monat) {
  case 1:
    console.log("Januar");
    break;
  case 2:
    console.log("Februar");
    break;
  case 3:
    console.log("M√§rz"); // ‚úÖ
    break;
  case 12:
    console.log("Dezember");
    break;
  default:
    console.log("Anderer Monat");
}

// SWITCH vs. IF-ELSE
console.log("\n--- Switch vs. If-Else ---");

// ‚úÖ SWITCH gut f√ºr: Viele exakte Vergleiche (===)
let farbe = "rot";

switch (farbe) {
  case "rot":
    console.log("Stopp"); // ‚úÖ
    break;
  case "gelb":
    console.log("Achtung");
    break;
  case "gr√ºn":
    console.log("Los");
    break;
}

// ‚úÖ IF-ELSE gut f√ºr: Bereiche, komplexe Bedingungen
let score2 = 85;

if (score2 >= 90) {
  console.log("A");
} else if (score2 >= 80) {
  console.log("B"); // ‚úÖ Einfacher als 10 case-Statements!
} else if (score2 >= 70) {
  console.log("C");
}

// SWITCH mit Strings (h√§ufig bei Actions/Commands)
let command = "start";

switch (command) {
  case "start":
    console.log("Programm gestartet"); // ‚úÖ
    break;
  case "stop":
    console.log("Programm gestoppt");
    break;
  case "pause":
    console.log("Programm pausiert");
    break;
  case "reset":
    console.log("Programm zur√ºckgesetzt");
    break;
  default:
    console.log("Unbekannter Befehl");
}

// üí° WICHTIG F√úR REACT:
// Switch h√§ufig in Reducers (Redux, useReducer)
// switch (action.type) {
//   case 'INCREMENT': return { count: state.count + 1 };
//   case 'DECREMENT': return { count: state.count - 1 };
//   case 'RESET': return { count: 0 };
//   default: return state;
// }

// ============================================
// GUARD CLAUSES (Defensive Programmierung)
// ============================================

console.log("\n--- Guard Clauses ---");

function verarbeiteDaten(daten) {
  // Guard Clause 1: Pr√ºfe auf null/undefined
  if (!daten) {
    console.log("Keine Daten vorhanden");
    return;
  }

  // Guard Clause 2: Pr√ºfe auf leeres Array
  if (daten.length === 0) {
    console.log("Leeres Array");
    return;
  }

  // Guard Clause 3: Pr√ºfe auf falschen Typ
  if (!Array.isArray(daten)) {
    console.log("Keine g√ºltige Liste");
    return;
  }

  // Hauptlogik nur wenn alle Pr√ºfungen bestanden
  console.log("Verarbeite", daten.length, "Eintr√§ge");
  daten.forEach((item) => console.log("Item:", item));
}

verarbeiteDaten([1, 2, 3]); // ‚úÖ Funktioniert
verarbeiteDaten(null); // Guard Clause 1
verarbeiteDaten([]); // Guard Clause 2

// ‚úÖ VORTEIL: Code ist flacher, lesbarer
// ‚ùå Ohne Guard Clauses: Tiefe Verschachtelung!

// ============================================
// ZUSAMMENFASSUNG
// ============================================

/*
BEDINGTE ANWEISUNGEN:

IF-ELSE:
‚úÖ if f√ºr einfache Bedingungen
‚úÖ if-else f√ºr Entweder-Oder
‚úÖ if-else if-else f√ºr mehrere Bedingungen
‚úÖ Verschachteln m√∂glich, aber nicht √ºbertreiben
‚úÖ IMMER geschweifte Klammern verwenden
‚úÖ Vom Spezifischen zum Allgemeinen pr√ºfen

TERN√ÑRER OPERATOR:
‚úÖ condition ? wennTrue : wennFalse
‚úÖ Perfekt f√ºr einfache Bedingungen
‚úÖ Sehr h√§ufig in JSX (React)
‚úÖ Nicht zu tief verschachteln

SWITCH-CASE:
‚úÖ Gut f√ºr viele exakte Vergleiche (===)
‚úÖ break nicht vergessen (sonst Fall-Through)
‚úÖ Mehrere Cases f√ºr gleichen Code m√∂glich
‚úÖ default f√ºr "alles andere"
‚úÖ H√§ufig in Reducers (React)

VERGLEICHSOPERATOREN:
‚úÖ IMMER === statt == verwenden
‚úÖ !==, >, <, >=, <=
‚úÖ Truthy/Falsy Werte beachten

LOGISCHE OPERATOREN:
‚úÖ && (UND), || (ODER), ! (NICHT)
‚úÖ F√ºr komplexere Bedingungen
‚úÖ Short-Circuit Evaluation nutzen

BEST PRACTICES:
‚úÖ === statt == (immer!)
‚úÖ Geschweifte Klammern immer verwenden
‚úÖ Guard Clauses f√ºr defensive Programmierung
‚úÖ Tern√§rer Operator f√ºr einfache F√§lle
‚úÖ if-else f√ºr komplexe Logik
‚úÖ switch f√ºr viele exakte Vergleiche
‚úÖ Klammern f√ºr Klarheit bei komplexen Bedingungen
*/

console.log("\n‚úÖ 2.1 Bedingte Anweisungen abgeschlossen!");
